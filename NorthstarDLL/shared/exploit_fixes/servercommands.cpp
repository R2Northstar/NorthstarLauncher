#include "core/convar/cvar.h"
#include "ns_limits.h"
#include "dedicated/dedicated.h"
#include "core/tier0.h"
#include "engine/r2engine.h"
#include "client/r2client.h"
#include "core/math/vector.h"

typedef void* (*GetBaseLocalClientType)();
GetBaseLocalClientType GetBaseLocalClient = nullptr;

ConVar* Cvar_ns_restrict_commands;

ON_DLL_LOAD("engine.dll", ServerCommands, (CModule module))
{
	GetBaseLocalClient = module.Offset(0x78200).RCast<GetBaseLocalClientType>();

	Cvar_ns_restrict_commands = new ConVar("ns_restrict_commands", "1", FCVAR_GAMEDLL, "", 0, 0, 0, 0, [](ConVar* cvar, const char* pOldValue, float flOldValue) {
			// this callback runs even if there was no actual change, so filter that out
			if (!strcmp(pOldValue, Cvar_ns_restrict_commands->GetString()))
				return;

			spdlog::info("ns_restrict_commands was changed from {} to {}", pOldValue, Cvar_ns_restrict_commands->GetString());

			R2::Cbuf_AddText(
				R2::Cbuf_GetCurrentPlayer(),
				"disconnect \"Command restrictions were changed\"",
				R2::cmd_source_t::kCommandSrcCode);

			bool shouldRestrict = Cvar_ns_restrict_commands->GetBool();
			bool* localClientBase = (bool*)(*GetBaseLocalClient)();
			*(localClientBase + 64228) = shouldRestrict; // m_bRestrictServerCommands
			*(localClientBase + 64229) = shouldRestrict; // m_bRetrictClientCommands
		});
}
